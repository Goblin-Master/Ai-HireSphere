# 通用环境version: '3.8'networks:  net01:    driver: bridgeservices:  # mysql环境  mysql:    image: mysql:8.0    container_name: mysql    hostname: mysql    ports:      - "3306:3306"    environment:      TZ: Asia/Shanghai      # 这里123456改成自己的密码      MYSQL_ROOT_PASSWORD: 123456    volumes:      - "/myenv/mysql/data:/var/lib/mysql"    networks:      - net01  # etcd环境  etcd:    container_name: etcd    hostname: etcd    image: gcr.io/etcd-development/etcd:v3.4.25    restart: on-failure    entrypoint: ["/usr/local/bin/etcd", "--config-file", "/tmp/etcd/conf/etcd.yml"]    ports:      - "2379:2379"      - "2380:2380"    environment:      ETCDCTL_API: 3    volumes:      - type: bind        source: /myenv/etcd/        target: /tmp/etcd    networks:      - net01  # postgres环境  # redis环境(需要自备redis.conf)  redis:    image: redis    container_name: redis    hostname: redis    ports:      - "6379:6379"    volumes:      - "/myenv/redis/conf:/usr/local/etc/redis"      - "/myenv/redis/data:/data"    networks:      - net01  # kafka环境(集群)  kafka-0:    container_name: kafka-0    hostname: kafka-0    image: docker.io/bitnami/kafka:3.7    # ports:    #   - '9094:9094'    environment:      # KRaft settings      # 允许使用kraft，即Kafka替代Zookeeper      - KAFKA_ENABLE_KRAFT=yes      # broker.id，必须唯一      - KAFKA_CFG_NODE_ID=0      # kafka角色，做broker，也要做controller      - KAFKA_CFG_PROCESS_ROLES=controller,broker      # 集群地址      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093      # 使用Kafka时的集群id，集群内的Kafka都要用这个id做初始化      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv      # Listeners      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094      # 定义外网访问地址（宿主机ip地址和端口）      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-0:9092,EXTERNAL://192.168.118.130:9094      # 定义监听器的安全协议      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT      # 指定供外部使用的控制类请求信息      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER      # 指定供内部使用的监听器名称      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL      # 设置broker最大内存，和初始内存      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M      # 不允许自动创建主题      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false      # 集群设定      # 用于指定 offsets 主题的副本因子。offsets 主题用于存储消费者组的偏移量，这些偏移量用于跟踪每个消费者在日志中的位置      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3      # 用于指定事务状态日志的副本因子。事务状态日志用于存储事务元数据，以便在发生故障时进行恢复      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3        # 用于指定事务状态日志的最小 ISR。ISR 是一组同步副本，它们在故障情况下仍然可以继续工作      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2    volumes:      - kafka_0_data:/bitnami/kafka    networks:      - net01  kafka-1:    container_name: kafka-1    hostname: kafka-1    image: docker.io/bitnami/kafka:3.7    # ports:    #   - '9094:9094'    environment:      # KRaft settings      # 允许使用kraft，即Kafka替代Zookeeper      - KAFKA_ENABLE_KRAFT=yes      # broker.id，必须唯一      - KAFKA_CFG_NODE_ID=1      # kafka角色，做broker，也要做controller      - KAFKA_CFG_PROCESS_ROLES=controller,broker      # 集群地址      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093      # 使用Kafka时的集群id，集群内的Kafka都要用这个id做初始化      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuw      # Listeners      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9095      # 定义外网访问地址（宿主机ip地址和端口）      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-0:9092,EXTERNAL://192.168.118.130:9095      # 定义监听器的安全协议      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT      # 指定供外部使用的控制类请求信息      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER      # 指定供内部使用的监听器名称      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL      # 设置broker最大内存，和初始内存      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M      # 不允许自动创建主题      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false      # 集群设定      # 用于指定 offsets 主题的副本因子。offsets 主题用于存储消费者组的偏移量，这些偏移量用于跟踪每个消费者在日志中的位置      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3      # 用于指定事务状态日志的副本因子。事务状态日志用于存储事务元数据，以便在发生故障时进行恢复      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3      # 用于指定事务状态日志的最小 ISR。ISR 是一组同步副本，它们在故障情况下仍然可以继续工作      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2    volumes:      - kafka_1_data:/bitnami/kafka    networks:      - net01  kafka-2:    container_name: kafka-2    hostname: kafka-2    image: docker.io/bitnami/kafka:3.7    # ports:    #   - '9094:9094'    environment:      # KRaft settings      # 允许使用kraft，即Kafka替代Zookeeper      - KAFKA_ENABLE_KRAFT=yes      # broker.id，必须唯一      - KAFKA_CFG_NODE_ID=2      # kafka角色，做broker，也要做controller      - KAFKA_CFG_PROCESS_ROLES=controller,broker      # 集群地址      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093      # 使用Kafka时的集群id，集群内的Kafka都要用这个id做初始化      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv      # Listeners      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9096      # 定义外网访问地址（宿主机ip地址和端口）      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-0:9092,EXTERNAL://192.168.118.130:9096      # 定义监听器的安全协议      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT      # 指定供外部使用的控制类请求信息      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER      # 指定供内部使用的监听器名称      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL      # 设置broker最大内存，和初始内存      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M      # 不允许自动创建主题      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false      # 集群设定      # 用于指定 offsets 主题的副本因子。offsets 主题用于存储消费者组的偏移量，这些偏移量用于跟踪每个消费者在日志中的位置      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3      # 用于指定事务状态日志的副本因子。事务状态日志用于存储事务元数据，以便在发生故障时进行恢复      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3      # 用于指定事务状态日志的最小 ISR。ISR 是一组同步副本，它们在故障情况下仍然可以继续工作      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2    volumes:      - kafka_2_data:/bitnami/kafka    networks:      - net01volumes:  kafka_0_data:    driver: local  kafka_1_data:    driver: local  kafka_2_data:    driver: local