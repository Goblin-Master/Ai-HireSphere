// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package userrpc

import (
	"context"

	"Ai-HireSphere/common/call/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Id            = user.Id
	OSSUploadReq  = user.OSSUploadReq
	OSSUploadResp = user.OSSUploadResp
	Phone         = user.Phone
	UserInfo      = user.UserInfo

	UserRpc interface {
		FindUserById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfo, error)
		FindUserByPhone(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*UserInfo, error)
		OssUpload(ctx context.Context, in *OSSUploadReq, opts ...grpc.CallOption) (*OSSUploadResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

func (m *defaultUserRpc) FindUserById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.FindUserById(ctx, in, opts...)
}

func (m *defaultUserRpc) FindUserByPhone(ctx context.Context, in *Phone, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.FindUserByPhone(ctx, in, opts...)
}

func (m *defaultUserRpc) OssUpload(ctx context.Context, in *OSSUploadReq, opts ...grpc.CallOption) (*OSSUploadResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.OssUpload(ctx, in, opts...)
}
